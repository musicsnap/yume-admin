Laravel 框架启动过程
1、入口文件
index.php
导入 composer 自动加载功能 ./bootstrap/autoload.php
2、启动文件
导入 laravel 容器 ./bootstrap/app.php
启动容器
注册容器自身（registerBaseBindings）
注册事件系统和路由系统（registerBaseServiceProviders）
注册 laravel 自有类别名（registerCoreContainerAliases）
注册 Http 处理器
注册 Cli 处理器
注册异常处理器
3、Http 处理器
启动 Http 处理器：Illuminate\Contracts\Http\Kernel->handle($request)
进入 Http 请求处理工作：Illuminate\Contracts\Http\Kernel->sendRequestThroughRouter
重新在容器中绑定 request
启动并配置 HTTP 相关的服务组件（Illuminate\Foundation\Bootstrap* 中的所有组件）
 启动顺序：
 1. DetectEnvironment Dotenv 配置
 2. LoadConfiguration Config 配置 （/bootstrap/cache/config.php 或者 /config/*）
 3. ConfigureLogging 日志系统配置
 4. HandleExceptions php报错配置
 5. RegisterFacades 注册外观
 6. RegisterProviders 注册用户服务提供器
 7. BootProviders 启动所有提供器
路由管理器 Pipeline :
穿过全局中间件 $middleware
Router->dispatch(Request $request);
Router->dispatchToRoute(Request $request);
Router->runRouteWithinStack(Route $route, Request $request)
匹配到路由 Pipeline :
穿过路由中间件 $routeMiddleware
Route->run(Request $request)
Route->runController(Request $request)
Controller->method()
业务逻辑
处理反射
用户业务逻辑
处理 Response
字符串
普通 Response
跳转 Response
JsonResponse
ViewResponse
4、请求返回
应答对象发送到浏览器 $response->send();
运行可终止中间件（可终止中间件会是新的中间件实例，除非中间件被设置为单例模式）
应用终止后处理 Illuminate\Contracts\Http\Kernel->terminate($request, $response)
配置信息
<configuration>
  <system.webServer>
    <rewrite>
      <rules>
        <rule name="Imported Rule 1" stopProcessing="true">
          <match url="^(.*)/$" ignoreCase="false" />
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" negate="true" />
          </conditions>
          <action type="Redirect" redirectType="Permanent" url="/{R:1}" />
        </rule>
        <rule name="Imported Rule 2" stopProcessing="true">
          <match url="^" ignoreCase="false" />
          <conditions>
            <add input="{REQUEST_FILENAME}" matchType="IsDirectory" ignoreCase="false" negate="true" />
            <add input="{REQUEST_FILENAME}" matchType="IsFile" ignoreCase="false" negate="true" />
          </conditions>
          <action type="Rewrite" url="index.php" />
        </rule>
      </rules>
    </rewrite>
  </system.webServer>
</configuration>

1、添加sql监听
第一步：创建监听器
php artisan make:listener QueryListener --event=Illuminate\Database\Events\QueryExecuted
生成文件于 app/Listeners/QueryListener.php
第二步：注册事件
打开 app/Providers/EventServiceProvider.php，在 $listen 中添加 illuminate.query 事件的监听器为 QueryListener：
protected $listen = [
        'Illuminate\Database\Events\QueryExecuted' => [
            'App\Listeners\QueryListener',
        ],
    ];
当然在类前面你需要 use App\Listeners\QueryListener; 不然就报类不存在了。
第三步：添加逻辑
光有一个空的监听器是不够的，我们需要自己实现如何把 $sql 记录到日志中。为此，对 QueryListener 进行改造，完善其 handle 方法如下:
<?php
namespace App\Listeners;
use Illuminate\Database\Events\QueryExecuted;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;
use Log;
class QueryListener
{
    /**
     * Create the event listener.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Handle the event.
     *
     * @param  QueryExecuted  $event
     * @return void
     */
    public function handle(QueryExecuted $event)
    {
        if (env('APP_ENV', 'production') == 'local') {
            $sql = str_replace("?", "'%s'", $event->sql);

            $log = vsprintf($sql, $event->bindings);

            Log::info($log);
        }
    }
}
2、输出 “N 分钟前”、“1 天前” 等友好的 time ago 时间
我们会经常有这样的需求，要求将发布时间显示为 “N 分钟前”、“1 天前” 等 time ago 的格式。
在 Laravel 中这相当简单，不需要依赖其它库（框架内已经依赖的就够了）即可完成。
第一步，在 app/Providers/AppServiceProvider.php 中设置地区：
 public function boot()
{
    \Carbon\Carbon::setLocale('zh');
}
 //...
第二步，模板中使用 Carbon 的 diffForHumans 方法来输出友好时间

 {{ $comment->created_at->diffForHumans() }} // 3小时前